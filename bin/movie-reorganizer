#!/usr/bin/env python3
# -*- coding: utf-8 -*-


# This code is based on 
# OpenSubtitlesDownload.py / Version 5.1
# As such, it's licensed under GNU General Public License
# You can browse the project's GitHub page:
# - https://github.com/emericg/OpenSubtitlesDownload
# Learn much more about customizing OpenSubtitlesDownload.py for your needs:
# - https://github.com/emericg/OpenSubtitlesDownload/wiki
import json
import os
import sys
import time
import struct
import hashlib
import argparse
import mimetypes
import redis
import requests
from xmlrpc.client import ServerProxy
import traceback
from slugify import slugify as slugify_raw
import subprocess

# ==== OpenSubtitles.org server settings =======================================

# XML-RPC server domain for opensubtitles.org:
osd_server = ServerProxy('https://api.opensubtitles.org/xml-rpc')

# You can use your opensubtitles.org VIP account to avoid "in-subtitles" advertisement and bypass download limits.
# Be careful about your password security, it will be stored right here in plain text...
# You can also change opensubtitles.org language, it will be used for error codes and stuff.
# Can be overridden at run time with '-u' and '-p' arguments.
osd_username = os.environ.get('OPEN_SUBTITLES_USERNAME')
osd_password = os.environ.get('OPEN_SUBTITLES_PASSWORD')
osd_language = 'en'
opt_languages = ['eng']
opt_language_suffix = 'auto'
opt_language_suffix_size = 'auto'
opt_language_suffix_separator = '_'
opt_force_utf8 = True
opt_search_mode = 'hash_and_filename'
opt_search_overwrite = True
opt_selection_mode = 'default'
opt_output_path = ''
opt_gui = 'cli'
opt_omdb_api_key = os.environ.get('OMDB_API_KEY')
opt_redis_expiration = 60 * 60 * 24 * 3

redis_instance = redis.Redis(host='localhost', port=6379, db=0)


def slugify(v: str):
    return slugify_raw(v, separator='_', lowercase=False)


# https://stackoverflow.com/a/44873382/2446102
def sha256sum(filename):
    h = hashlib.sha256()
    b = bytearray(128 * 1024)
    mv = memoryview(b)
    with open(filename, 'rb', buffering=0) as f:
        for n in iter(lambda: f.readinto(mv), 0):
            h.update(mv[:n])
    return h.hexdigest()


redis_prefix = __file__ + ':' + 'foo2'  # sha256sum(__file__)


def to_redis_key(namespace: str, value: str):
    return redis_prefix + ':' + namespace + ':' + value


def get_full_info_from_omdb(id: str):
    ret = {
        'id': id
    }
    basic_info = get_info_from_omdb(id)
    ret['basic_info'] = basic_info
    if 'Response' in basic_info and basic_info['Response'] == 'False':
        raise Exception('Bad response', basic_info)
    if basic_info['Type'] == 'episode':
        ret['series'] = get_info_from_omdb(basic_info['seriesID'])
    else:
        ret['series'] = None
    return ret


def get_info_from_omdb(id: str):
    if not id.startswith('tt'):
        return get_info_from_omdb('tt' + id)
    redis_key = to_redis_key('omdb', id)
    if redis_instance.exists(redis_key):
        ret_json = json.loads(redis_instance.get(str(redis_key)))
    else:
        ret = requests.get('http://www.omdbapi.com/', {
            'apikey': opt_omdb_api_key,
            'i': id
        })
        if ret.status_code != 200:
            return None
        ret_json = ret.json()
        redis_instance.set(redis_key, json.dumps(ret_json), ex=opt_redis_expiration)

    if 'Response' in ret_json and ret_json['Response'] == 'False':
        return None
    return ret_json


def checkFileValidity(path):
    """Check mimetype and/or file extension to detect valid video file"""
    if os.path.isfile(path) is False:
        return False

    fileMimeType, encoding = mimetypes.guess_type(path)
    if fileMimeType is None:
        fileExtension = path.rsplit('.', 1)
        if fileExtension[1] not in ['avi', 'mov', 'mp4', 'mp4v', 'm4v', 'mkv', 'mk3d', 'webm', 'ts', 'mts', 'm2ts',
                                    'ps', 'vob', 'evo', 'mpeg', 'mpg',
                                    'asf', 'wm', 'wmv', 'rm', 'rmvb', 'divx', 'xvid']:
            return False
    else:
        fileMimeType = fileMimeType.split('/', 1)
        if fileMimeType[0] != 'video':
            return False

    return True


def checkSubtitlesExists(path):
    return False


# ==== Hashing algorithm =======================================================
# Info: https://trac.opensubtitles.org/projects/opensubtitles/wiki/HashSourceCodes
# This particular implementation is coming from SubDownloader: https://subdownloader.net

def hashFile(path):
    """Produce a hash for a video file: size + 64bit chksum of the first and
    last 64k (even if they overlap because the file is smaller than 128k)"""
    try:
        longlongformat = 'Q'  # unsigned long long little endian
        bytesize = struct.calcsize(longlongformat)
        fmt = "<%d%s" % (65536 // bytesize, longlongformat)
        stat = os.stat(path)
        redis_key = to_redis_key('moviehash', ':'.join([path, str(stat.st_mtime)]))
        if redis_instance.exists(redis_key):
            return str(redis_instance.get(redis_key))
        f = open(path, "rb")

        filesize = os.fstat(f.fileno()).st_size
        filehash = filesize

        if filesize < 65536 * 2:
            print("error", "File size error!",
                  "File size error while generating hash for this file:\n<i>" + path + "</i>")
            return "SizeError"

        buf = f.read(65536)
        longlongs = struct.unpack(fmt, buf)
        filehash += sum(longlongs)

        f.seek(-65536, os.SEEK_END)  # size is always > 131072
        buf = f.read(65536)
        longlongs = struct.unpack(fmt, buf)
        filehash += sum(longlongs)
        filehash &= 0xFFFFFFFFFFFFFFFF

        f.close()
        returnedhash = "%016x" % filehash
        redis_instance.set(redis_key, filehash, ex=opt_redis_expiration)
        return returnedhash

    except IOError:
        print("error", "I/O error!", "Input/Output error while generating hash for this file:\n<i>" + path + "</i>")
        return "IOError"


# ==============================================================================
# ==== Main program (execution starts here) ====================================
# ==============================================================================

# ==== Exit code returned by the software. You can use them to improve scripting behaviours.
# 0: Success, and subtitles downloaded
# 1: Success, but no subtitles found or downloaded
# 2: Failure

ExitCode = 2

# ==== File and language lists

videoPathList = []
languageList = []

currentVideoPath = ""
currentLanguage = ""

# ==== Argument parsing

# Get OpenSubtitlesDownload.py script absolute path
if os.path.isabs(sys.argv[0]):
    scriptPath = sys.argv[0]
else:
    scriptPath = os.getcwd() + "/" + str(sys.argv[0])

# Setup ArgumentParser
parser = argparse.ArgumentParser(prog='OpenSubtitlesDownload.py',
                                 description='Automatically find and download the right subtitles for your favorite videos!',
                                 formatter_class=argparse.RawTextHelpFormatter)

parser.add_argument('searchPathList',
                    help="The video file(s) or folder(s) for which subtitles should be searched and downloaded",
                    nargs='+')

# Parse arguments
arguments = parser.parse_args()

# ==== Check for Python 3

if sys.version_info < (3, 0):
    print("error", "Wrong Python version",
          "You need <b>Python 3</b> to use OpenSubtitlesDownload <b>v5</b>.\n" + \
          "If you want to stick to Python 2, please continue using OpenSubtitlesDownload v4.")
    sys.exit(2)

# ==== Get video paths, validate them, and if needed check if subtitles already exists

for i in arguments.searchPathList:
    path = os.path.abspath(i)
    if os.path.isdir(path):  # if it's a folder
        if opt_gui == 'cli':  # check all of the folder's (recursively)
            for root, _, items in os.walk(path):
                for item in items:
                    localPath = os.path.join(root, item)
                    if checkFileValidity(localPath):
                        if opt_search_overwrite or (not opt_search_overwrite and not checkSubtitlesExists(localPath)):
                            videoPathList.append(localPath)
        else:  # check all of the folder's files
            for item in os.listdir(path):
                localPath = os.path.join(path, item)
                if checkFileValidity(localPath):
                    if opt_search_overwrite or (not opt_search_overwrite and not checkSubtitlesExists(localPath)):
                        videoPathList.append(localPath)
    elif checkFileValidity(path):  # if it is a file
        if opt_search_overwrite or (not opt_search_overwrite and not checkSubtitlesExists(path)):
            videoPathList.append(path)

# If videoPathList is empty, abort!
if not videoPathList:
    sys.exit(1)

# ==== Instances dispatcher ====================================================

# The first video file will be processed by this instance
currentVideoPath = videoPathList[0]
videoPathList.pop(0)

# The remaining file(s) are dispatched to new instance(s) of this script
for videoPathDispatch in videoPathList:

    # Pass settings
    command = [sys.executable, scriptPath, videoPathDispatch]

    # Do not spawn too many instances at once, avoid error '429 Too Many Requests'
    time.sleep(2)

    if opt_gui == 'cli' and opt_selection_mode != 'auto':
        # Synchronous call
        process_videoDispatched = subprocess.call(command)
    else:
        # Asynchronous call
        process_videoDispatched = subprocess.Popen(command)


def get_commands(video_path: str, full_info):
    file_dirname = os.path.dirname(video_path)
    file_ext = '.' + video_path.rsplit('.', 1)[1]
    if not 'basic_info' in full_info:
        print('full_info', full_info)
    episode = full_info['basic_info']
    commands = []
    if episode['Type'] == 'movie':
        expected_path_elements = [slugify(episode['Title'] + '(' + episode['Year'] + ')') + file_ext]
        new_file_path: str = os.path.join(file_dirname, *expected_path_elements)
        if new_file_path == video_path:
            return []
        commands.append(['mv', video_path, new_file_path])
        poster = episode['Poster']
        if poster:
            poster_ext = '.' + poster.rsplit('.', 1)[1]
            poster_output_path = new_file_path.rsplit('.', 1)[0] + poster_ext
            commands.append(['wget', '--timestamping', poster, '-O', poster_output_path])

        return commands
    if episode['Type'] == 'episode':
        series = full_info['series']
        episode = full_info['basic_info']
        season_number = episode['Season'].zfill(2)
        episode_number = episode['Episode'].zfill(2)
        if not series or not 'Title' in series:
            return []
        title = slugify(series['Title'] + '(' + series['Year'] + ')')
        expected_path_elements = [
            title,
            'S' + season_number,
            'E' + episode_number + '.' + slugify(episode['Title']) + file_ext
        ]
        new_file_path = os.path.join(file_dirname, *expected_path_elements)
        if new_file_path == video_path:
            return []
        already_in_proper_folder = os.path.join(*expected_path_elements) in file_dirname
        if already_in_proper_folder:
            return []
        new_dir = os.path.dirname(new_file_path)
        if not os.path.isdir(new_dir):
            commands.append(['mkdir', '-p', new_dir])
        commands.append(['mv', video_path, new_file_path])
        return commands
    pass


try:
    # ==== Connection to OpenSubtitlesDownload
    try:
        session = osd_server.LogIn(osd_username, hashlib.md5(osd_password[0:32].encode('utf-8')).hexdigest(),
                                   osd_language, 'opensubtitles-download 5.1')
    except Exception:
        # Retry once after a delay (could just be a momentary overloaded server?)
        time.sleep(3)
        try:
            session = osd_server.LogIn(osd_username, osd_password, osd_language, 'opensubtitles-download 5.1')
        except Exception:
            print("error", "Connection error!", "Unable to reach OpenSubtitles.org servers!\n\nPlease check:\n" + \
                  "- Your Internet connection status\n" + \
                  "- www.opensubtitles.org availability\n" + \
                  "The subtitles search and download service is powered by <a href=\"https://opensubtitles.org\">opensubtitles.org</a>.\n" + \
                  "Be sure to donate if you appreciate the service provided!")
            sys.exit(2)

    # Login not accepted?
    if session['status'] != '200 OK':
        if session['status'] == '401 Unauthorized':
            print("error", "Connection error!",
                  "OpenSubtitles.org servers refused the connection: <b>" + session['status'] + "</b>.\n\n" + \
                  "- You MUST use a valid OpenSubtitles.org account!\n" + \
                  "- Check out <a href=\"https://github.com/emericg/OpenSubtitlesDownload/wiki/Log-in-with-a-registered-user\">how and why</a> on our wiki page")
        else:
            print("error", "Connection error!", "OpenSubtitles.org servers refused the connection: <b>" + session[
                'status'] + "</b>.\n\nPlease check:\n" + \
                  "- www.opensubtitles.org availability\n" + \
                  "- Your download limits (200 subtitles per 24h, 40 subtitles per 10s)\n\n" + \
                  "The subtitles search and download service is powered by <a href=\"https://opensubtitles.org\">opensubtitles.org</a>.\n" + \
                  "Be sure to donate if you appreciate the service provided!")
        sys.exit(2)

    # ==== Count languages selected for this search
    for language in opt_languages:
        languageList += list(language.split(','))

    languageCount_search = len(languageList)
    languageCount_results = 0

    if opt_language_suffix == 'auto' and languageCount_search > 1:
        opt_language_suffix = 'on'

    if opt_language_suffix_size == 'auto':
        languagePrefixSize = 0
        for language in languageList:
            languagePrefixSize += len(language)
        opt_language_suffix_size = (languagePrefixSize // languageCount_search)

    # ==== Get file hash, size and name
    videoTitle = ''
    videoHash = hashFile(currentVideoPath)
    videoSize = os.path.getsize(currentVideoPath)
    videoFileName = os.path.basename(currentVideoPath)

    # ==== Search for available subtitles
    for currentLanguage in opt_languages:

        subtitlesSearchList = []
        subtitlesResultList = {}

        if opt_search_mode in ('hash', 'hash_then_filename', 'hash_and_filename'):
            subtitlesSearchList.append(
                {'sublanguageid': currentLanguage, 'moviehash': videoHash, 'moviebytesize': str(videoSize)})
        if opt_search_mode in ('filename', 'hash_and_filename'):
            subtitlesSearchList.append({'sublanguageid': currentLanguage, 'query': videoFileName})
        limit_key = to_redis_key('SearchSubtitles' + opt_search_mode, json.dumps(subtitlesSearchList, sort_keys=True))

        ## Primary search
        try:
            if redis_instance.exists(limit_key):
                subtitlesResultList = json.loads(redis_instance.get(limit_key))
            else:
                subtitlesResultList = osd_server.SearchSubtitles(session['token'], subtitlesSearchList)
                redis_instance.set(limit_key, json.dumps(subtitlesResultList), ex=opt_redis_expiration)
        except Exception:
            traceback.print_exc()
            # Retry once after a delay (we are already connected, the server may be momentary overloaded)
            time.sleep(3)
            try:
                subtitlesResultList = osd_server.SearchSubtitles(session['token'], subtitlesSearchList)
            except Exception:
                print("error", "Search error!", "Unable to reach opensubtitles.org servers!\n<b>Search error</b>")

        ## Parse the results of the XML-RPC query
        if ('data' in subtitlesResultList) and (subtitlesResultList['data']) and (
                subtitlesResultList['data'][0]['MatchedBy'] == 'moviehash' or subtitlesResultList['data'][0][
            'Score'] > 30):
            actual_data = subtitlesResultList['data'][0]
            if not actual_data:
                raise Exception('Invalid data')
            if not actual_data['IDMovieImdb']:
                raise Exception('Movie has no IDMovieImdb')
            #        print(json.dumps(actual_data))

            movie_id = actual_data['IDMovieImdb']
            #     print('movie_id', movie_id)
            full_info = get_full_info_from_omdb(movie_id)
            #    print(json.dumps(full_info))
            commands = get_commands(currentVideoPath, full_info)
            for command in commands:
                build_command = ['escape-shell']
                if subtitlesResultList['data'][0]['MatchedBy'] != 'moviehash':
                    build_command.append('echo')
                build_command.extend(command)
                subprocess.call(build_command)
                print('')
                # print(*command)
            ExitCode = 0
            break
        else:
            print(f"No (good) results were found for {currentVideoPath} (moviehash={videoHash})", file=sys.stderr)
            ExitCode = 1




except KeyboardInterrupt:
    sys.exit(1)

except (OSError, IOError, RuntimeError, AttributeError, TypeError, NameError, KeyError) as ex:
    if "http.client.RemoteDisconnected" in str(sys.exc_info()[0]):
        sys.exit(ExitCode)

    print(ex)
    traceback.print_exc()

except Exception as ex:
    traceback.print_exc()
    # Catch unhandled exceptions but do not spawn an error window
    print("Unexpected error (line " + str(sys.exc_info()[-1].tb_lineno) + "): " + str(sys.exc_info()[0]))

# Disconnect from opensubtitles.org server, then exit
if session and session['token']: osd_server.LogOut(session['token'])
print('')
sys.exit(ExitCode)
